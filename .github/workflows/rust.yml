name: Rust

on:
  push:
    branches: [ "main", "develop" ] 
  pull_request:
    branches: [ "main", "develop" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Build
      run: cargo build --verbose

  unit-tests:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Run unit tests
      run: cargo test --verbose --all-features

  clippy-check:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Install Clippy
      run: rustup component add clippy
    - name: Run Clippy
      run: cargo clippy --all-targets --all-features -- -D warnings
    - name: Run Rustfmt
      run: cargo fmt --all -- --check

  build-all-targets:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [
          "x86_64-unknown-linux-gnu",
          "aarch64-unknown-linux-musl",
          "x86_64-pc-windows-gnu",
        ]
    steps:
      - name: Install cross
        run: cargo install cross
      - name: Install mingw-w64 cross compiler
        if: matrix.target == 'x86_64-pc-windows-gnu'
        run: sudo apt-get update && sudo apt-get install -y mingw-w64

      - name: Install musl cross compiler (for aarch64-unknown-linux-musl)
        if: matrix.target == 'aarch64-unknown-linux-musl'
        run: sudo apt-get update && sudo apt-get install -y musl-tools

      - uses: actions/checkout@v4
      # Install Rust toolchain and target
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      # Build for target
      - name: Build for ${{ matrix.target }}
        run: cross build --release --target ${{ matrix.target }} --verbose
        
      # Create release directory
      - name: Create release directory
        run: |
         mkdir -p release/${{ matrix.target }}
         if [[ "${{ matrix.target }}" == *"windows"* ]]; then
            cp target/${{ matrix.target }}/release/t212_portfolio_analytics.exe release/${{ matrix.target }}/
         else
            cp target/${{ matrix.target }}/release/t212_portfolio_analytics release/${{ matrix.target }}/
         fi
         cp -r demo_data/ release/${{ matrix.target }}/demo_data
         cp -r data/ release/${{ matrix.target }}/data
         cp LICENSE release/${{ matrix.target }}/
         cp requirements.txt release/${{ matrix.target }}/
         cp stock_info.py release/${{ matrix.target }}/

      # Upload artifact
      - name: Upload artifact
        if: ${{ success() }}
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.target }}
          path: release/${{ matrix.target }}
          if-no-files-found: error
          retention-days: 7
     
      # Clean up
      - name: Clean up
        run: |
          rm -rf release/
      

  test-artifacts:
    needs: build-all-targets
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            exe: t212_portfolio_analytics
          - target: aarch64-unknown-linux-musl
            os: ubuntu-latest
            exe: t212_portfolio_analytics
          - target: x86_64-pc-windows-gnu
            os: windows-latest
            exe: t212_portfolio_analytics.exe
    runs-on: ${{ matrix.os }}

    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: build-${{ matrix.target }}
          path: release/${{ matrix.target }}

      - name: List files
        run: ls -R release/

      - name: Install QEMU (for ARM64)
        if: matrix.target == 'aarch64-unknown-linux-musl'
        run: |
          sudo apt-get update
          sudo apt-get install -y qemu-user


      - name: Set executable permission (Linux only)
        if: runner.os != 'Windows'
        run: chmod +x release/${{ matrix.target }}/${{ matrix.exe }}

      # Start server (Linux)
      - name: Start server (Linux)
        if: runner.os != 'Windows'
        run: |
           cd release/${{ matrix.target }}
           if [ "${{ matrix.target }}" = "aarch64-unknown-linux-musl" ]; then
              qemu-aarch64 ./${{ matrix.exe }} &
           else
             ./${{ matrix.exe }} &
           fi
           echo $! > server.pid
        shell: bash

      # Start server (Windows)
      - name: Start server (Windows)
        if: runner.os == 'Windows'
        run: |
          cd release\${{ matrix.target }}
          Start-Process -FilePath .\${{ matrix.exe }} -NoNewWindow -PassThru | ForEach-Object { $_.Id } > server.pid
        shell: pwsh

      - name: Wait for server to come up
        run: sleep 5
        shell: bash

      - name: Smoke-test with curl (Linux)
        if: runner.os != 'Windows'
        run: |
          curl --fail http://127.0.0.1:3000/dividends || (echo "Server did not respond" && exit 1)
        shell: bash

      # TODO (#30): Add smoke-test for Windows

      # Tear down server (Linux)
      - name: Tear down server (Linux)
        if: runner.os == 'Linux'
        run: |
         cd release/${{ matrix.target }}
         kill $(cat server.pid)
        shell: bash
